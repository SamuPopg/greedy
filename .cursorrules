# 集装箱装柜率最优解开发指导规范

## 项目背景
这是一个基于贪心算法的集装箱装载优化项目，目标是在固定体积(40HQ标准货柜: 1180cm*230cm*260cm)内装载1000+件货物，最大化空间利用率。

## 核心算法规范

### 1. 贪心算法设计原则
- **目标函数**: 最大化装柜率 = 货物理论体积 / 货柜标准体积
- **约束优先级**: 供应商顺序 > 易碎品规则 > 摆放方式 > 空间利用率
- **决策逻辑**: 每次选择当前最优解，不回溯
- **性能要求**: 算法复杂度不超过O(n²)，确保1000+件货物的计算效率

### 2. 空间计算与管理
- **三维空间建模**: 使用三维网格或坐标系精确记录每个位置状态
- **空间利用率计算**: 实时监控并记录局部和全局利用率
- **剩余空间识别**: 使用体素化方法识别不规则空隙
- **边界管理**: 动态调整供应商区域边界，支持实时优化

### 3. 约束处理机制
- **供应商顺序约束**: 严格按FIFO顺序装载，不可跨区域混放（除交接区）
- **易碎品保护**: 下两层禁止立放，确保货物安全
- **摆放方式约束**: 6种摆放方式(立放1/2、侧放1/2、躺放1/2)的智能选择
- **操作可行性**: 考虑后进先出的装卸顺序

## 代码规范

### 1. 命名规范
- **类名**: `ContainerOptimizer`、`CargoManager`、`SpaceCalculator`
- **方法名**: `calculateOptimalLayout`、`validatePlacementRules`、`optimizeSpaceUtilization`
- **变量名**: `remainingSpace`、`cargoVolume`、`supplierSequence`
- **常量名**: `CONTAINER_LENGTH`、`CONTAINER_WIDTH`、`CONTAINER_HEIGHT`

### 2. 架构设计
- **单一职责**: 每个类只负责一个核心功能
- **模块化设计**: 分离空间管理、约束检查、算法优化等模块
- **接口抽象**: 定义清晰的接口，便于扩展和测试
- **错误处理**: 完善的异常处理机制，避免算法崩溃

### 3. 性能优化
- **空间索引**: 使用KD树或八叉树快速查找可用空间
- **缓存机制**: 缓存计算结果，避免重复计算
- **并行处理**: 对独立的供应商区域并行优化
- **内存管理**: 及时释放不需要的空间数据

## 算法实现指导

### 1. 核心算法结构
```python
class GreedyContainerOptimizer:
    def __init__(self):
        self.container_dimensions = (1180, 230, 260)  # 长宽高cm
        self.space_manager = SpaceManager()
        self.constraint_checker = ConstraintChecker()
        self.placement_optimizer = PlacementOptimizer()
    
    def optimize_loading(self, suppliers_sequence, cargo_data):
        """主优化算法入口"""
        # 1. 预处理和区域划分
        # 2. 逐供应商优化装载
        # 3. 交接区混放优化
        # 4. 空间利用率计算
        pass
```

### 2. 关键算法模块
- **区域划分算法**: 基于货物体积动态调整供应商区域
- **启发式装载**: 结合贪心策略和组合模式库
- **空间填充算法**: 优化剩余空间利用
- **约束验证**: 确保方案可行性

### 3. 数据结构设计
- **货物对象**: 包含尺寸、重量、供应商、摆放方式等属性
- **空间网格**: 三维数组或稀疏矩阵表示空间状态
- **装载方案**: 包含货物位置、摆放方式、利用率等信息

## 测试与验证

### 1. 单元测试
- **空间计算测试**: 验证体积计算、边界检测的准确性
- **约束验证测试**: 测试各种约束条件的检查逻辑
- **算法性能测试**: 验证大规模数据下的执行效率

### 2. 集成测试
- **端到端测试**: 完整流程的功能验证
- **边界条件测试**: 极端情况下的算法稳定性
- **数据一致性测试**: 多模块间数据传递的正确性

### 3. 性能基准
- **装柜率目标**: 单集装箱装柜率 ≥ 92%
- **计算时间**: 从输入结果到输出方案时长 ≤ 10分钟
- **内存使用**: 峰值内存占用 ≤ 2GB

## 调试与优化

### 1. 调试策略
- **可视化工具**: 开发3D可视化界面，直观显示装载结果
- **日志机制**: 记录关键决策点和计算过程
- **分步验证**: 逐步验证算法的每个阶段

### 2. 优化策略
- **算法调优**: 根据实际数据调整贪心策略参数
- **数据结构优化**: 选择最适合的数据结构提高效率
- **并行优化**: 利用多核处理器加速计算

## 特殊要求

### 1. 问题特定考虑
- **易碎品特性**: 货物均为易碎品，需要特殊保护
- **尺寸特性**: 长度与宽度是高度的数十倍
- **数量跨度**: 单个种类数量差异大(5~150)

### 2. 实际操作约束
- **装载顺序**: 必须考虑供应商访问顺序
- **操作可行性**: 确保装载方案可实际操作
- **损耗接受**: 少量无法装载的货物可视为损耗

### 3. 扩展性考虑
- **多集装箱扩展**: 为未来多集装箱优化预留接口
- **算法升级**: 支持从贪心算法升级到遗传算法等
- **数据源扩展**: 支持不同格式的货物数据输入

## 输出要求

### 1. 装载方案
- **货物清单**: 每件货物的位置、摆放方式、所属供应商
- **装柜率报告**: 总体和分区的空间利用率统计
- **操作指导**: 按供应商顺序的装载操作步骤

### 2. 优化报告
- **算法性能**: 计算时间、内存使用、收敛情况
- **约束满足**: 各项约束条件的满足情况
- **改进建议**: 基于结果的优化建议

记住：始终将装柜率最大化作为核心目标，在满足所有约束条件的前提下，追求空间利用率的极致优化。 